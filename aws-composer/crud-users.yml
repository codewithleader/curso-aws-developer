Transform: AWS::Serverless-2016-10-31
Resources:
  UsersApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: UsersApi
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /users:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUser.Arn}/invocations
              responses: {}
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReadUsers.Arn}/invocations
              responses: {}
          /users/:id:
            patch:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateUser.Arn}/invocations
              responses: {}
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteUser.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
  CreateUser:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: CreateUser
      CodeUri: src/Function
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref users
          USERS_TABLE_ARN: !GetAtt users.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref users
      Events:
        UsersApiPOSTusers:
          Type: Api
          Properties:
            Path: /users
            Method: POST
            RestApiId: !Ref UsersApi
  CreateUserLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${CreateUser}
  ReadUsers:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ReadUsers
      CodeUri: src/Function2
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        UsersApiGETusers:
          Type: Api
          Properties:
            Path: /users
            Method: GET
            RestApiId: !Ref UsersApi
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref users
          USERS_TABLE_ARN: !GetAtt users.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref users
  ReadUsersLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${ReadUsers}
  UpdateUser:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: UpdateUser
      CodeUri: src/Function3
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        UsersApiPATCHusersid:
          Type: Api
          Properties:
            Path: /users/:id
            Method: PATCH
            RestApiId: !Ref UsersApi
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref users
          USERS_TABLE_ARN: !GetAtt users.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref users
  UpdateUserLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${UpdateUser}
  DeleteUser:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: DeleteUser
      CodeUri: src/Function4
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        UsersApiDELETEusersid:
          Type: Api
          Properties:
            Path: /users/:id
            Method: DELETE
            RestApiId: !Ref UsersApi
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref users
          USERS_TABLE_ARN: !GetAtt users.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref users
  DeleteUserLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteUser}
  users:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: name
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: API
      Members:
        - UsersApi
    Group2:
      Label: CRUD Functions
      Members:
        - CreateUser
        - ReadUsers
        - UpdateUser
        - DeleteUser
    Group3:
      Label: Database
      Members:
        - users